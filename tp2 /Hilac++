{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyP6AUCzVdOKGy+cojkncyHC",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/lx-jdar/progra-concurrente/blob/development/tp2%20/Hilac%2B%2B\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##                              TP_1 PARTE 2 C++\n",
        "---\n",
        "Dificultades C++: La principal dificultad que encontramos fue al crear los números aleatorios con la función \"srand()\" (con time(NULL) como paramentro) que tomaba la misma la misma semilla por lo que inicialmente la matrices A y B tenían los mismo valores pseudo aleatorios. Lo solucionamos usando un sleep de 1 seg para que la función \"srand()\" tomara otro instante como parametro.\n",
        "\n",
        "Tambien nos llamó la atención que los hilos en C++ se ejecutan automaticamente sin necesidad de un metodo start.\n",
        "\n",
        "Conclusiones: C++ ofrece una implementación de hilos similar a lenguajes más actuales como Java o C.\n",
        "\n"
      ],
      "metadata": {
        "id": "ilqCCfYeEZrA"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OT5t3CaDVlM9",
        "outputId": "3342e784-b84d-4ad3-ffdf-d7fd556b4e0e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Writing hilos.cpp\n"
          ]
        }
      ],
      "source": [
        "%%writefile hilos.cpp\n",
        "#include<thread>\n",
        "#include<iostream>\n",
        "#include<string>\n",
        "#include<vector>\n",
        "#include<time.h>\n",
        "#define TAM 5\n",
        "\n",
        "#define LIM_INF -32\n",
        "#define LIM_SUP  32\n",
        "\n",
        "#define INICIO_FILA  0\n",
        "#define INICIO_COLUM 0\n",
        "\n",
        "#define EJEC_OK 0\n",
        "bool sonIguales(int matA[][TAM],int matB[][TAM]);\n",
        "void llenar_matriz(int mat[][TAM],int limInf, int limSup);\n",
        "void mostrarMatriz(int mat [][TAM]);\n",
        "void sumarMatricez(int matC[][TAM],int matA[][TAM], int matB[][TAM]);\n",
        "void sumarFila(int matC[][TAM],int matA[][TAM],int matB[][TAM],int numFila);\n",
        "int main()\n",
        "{\n",
        "    int matrizA[TAM][TAM];\n",
        "    int matrizB[TAM][TAM];\n",
        "    int matrizC[TAM][TAM];\n",
        "    int matrizC_concurrente[TAM][TAM];\n",
        "\n",
        "\n",
        "    llenar_matriz(matrizA,LIM_INF,LIM_SUP);\n",
        "    printf(\"--------Mostrando Matriz A--------\\n\\n\");\n",
        "    mostrarMatriz(matrizA);\n",
        "\n",
        "    printf(\"\\n\");\n",
        "\n",
        "    llenar_matriz(matrizB,LIM_INF,LIM_SUP);\n",
        "    printf(\"--------Mostrando Matriz B--------\\n\\n\");\n",
        "    mostrarMatriz(matrizB);\n",
        "\n",
        "    printf(\"\\n\");\n",
        "    sumarMatricez(matrizC,matrizA,matrizB);\n",
        "    printf(\"--------Mostrando Matriz C suma secuencial MatA + MatB--------\\n\\n\");\n",
        "    mostrarMatriz(matrizC);\n",
        "\n",
        "    std::vector<std::thread> hilos;\n",
        "    int contHilosCreados;\n",
        "\n",
        "\n",
        "    for( contHilosCreados=INICIO_FILA; contHilosCreados<TAM; contHilosCreados++ )\n",
        "    {\n",
        "        hilos.push_back(std::thread(sumarFila,matrizC_concurrente,matrizA,matrizB,contHilosCreados));\n",
        "    }\n",
        "    std::this_thread::sleep_for(std::chrono::seconds(10));\n",
        "    for( contHilosCreados=INICIO_FILA; contHilosCreados<TAM; contHilosCreados++ )\n",
        "    {\n",
        "        hilos[contHilosCreados].join();\n",
        "    }\n",
        "\n",
        "    printf(\"\\n\");\n",
        "    printf(\"--------Mostrando Matriz C suma concurrente MatA + MatB--------\\n\\n\");\n",
        "    mostrarMatriz(matrizC_concurrente);\n",
        "\n",
        "    std::cout<<\"El resultado de la comparcion de matrizC_concurrente y la matrizC (secuencia) es: \"<<sonIguales(matrizC,matrizC_concurrente)<<\" (1=SON IGUALES 0=SON DISTINTAS)\"<<std::endl;\n",
        "\n",
        "    return EJEC_OK;\n",
        "}\n",
        "void llenar_matriz(int mat[][TAM],int limInf, int limSup)\n",
        "{\n",
        "    int fila,columna;\n",
        "    std::this_thread::sleep_for(std::chrono::seconds(1));\n",
        "    srand(time(NULL));\n",
        "    for(fila=INICIO_FILA; fila<TAM; fila++)\n",
        "    {\n",
        "      for(columna=INICIO_COLUM; columna<TAM; columna++)\n",
        "      {\n",
        "         mat[fila][columna]=rand()%(2*(limSup+1))+limInf;\n",
        "      }\n",
        "    }\n",
        "}\n",
        "\n",
        "void mostrarMatriz(int mat[][TAM])\n",
        "{\n",
        "    int fila,columna;\n",
        "\n",
        "    for(fila=INICIO_FILA; fila<TAM; fila++)\n",
        "    {\n",
        "      printf(\"      \");\n",
        "      for(columna=INICIO_COLUM; columna<TAM; columna++)\n",
        "      {\n",
        "         printf(\"%3d \",mat[fila][columna]);\n",
        "      }\n",
        "      printf(\"\\n\");\n",
        "    }\n",
        "}\n",
        "void sumarMatricez(int matC[][TAM],int matA[][TAM], int matB[][TAM])\n",
        "{\n",
        "    int fila,columna;\n",
        "    for(fila=INICIO_FILA; fila<TAM; fila++)\n",
        "    {\n",
        "      for(columna=INICIO_COLUM; columna<TAM; columna++)\n",
        "      {\n",
        "          matC[fila][columna] = matA[fila][columna] + matB[fila][columna];\n",
        "      }\n",
        "    }\n",
        "}\n",
        "void sumarFila( int matC[][TAM], int matA[][TAM], int matB[][TAM], int numFila)\n",
        "{\n",
        "    int columna;\n",
        "    for(columna=INICIO_COLUM; columna<TAM; columna++)\n",
        "    {\n",
        "       matC[numFila][columna] = matA[numFila][columna] + matB[numFila][columna];\n",
        "    }\n",
        "}\n",
        "bool sonIguales(int matA[][TAM],int matB[][TAM])\n",
        "{\n",
        "    int fila;\n",
        "    int columna;\n",
        "    for( fila=INICIO_FILA; fila<TAM; fila++)\n",
        "    {\n",
        "       for( columna=INICIO_COLUM; columna<TAM; columna++)\n",
        "       {\n",
        "         if( matA[fila][columna] !=  matB[fila][columna])\n",
        "            return false;\n",
        "       }\n",
        "    }\n",
        "    return true;\n",
        "}\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "pHVLv1EXESi7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!g++ -o hilos hilos.cpp"
      ],
      "metadata": {
        "id": "Ib0BPc95VrYN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "geD9azkICe3q"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!./hilos"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "de_6wcvOVys3",
        "outputId": "e55ac4fc-5ac3-4040-e5be-557606833439"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--------Mostrando Matriz A--------\n",
            "\n",
            "       13   1 -31 -18  14 \n",
            "       19 -17 -12 -18  19 \n",
            "       32 -32 -18  27  24 \n",
            "       29  -9  30   3  24 \n",
            "       -6 -31  -9 -31  22 \n",
            "\n",
            "--------Mostrando Matriz B--------\n",
            "\n",
            "      -28  -4 -24  -4 -22 \n",
            "      -13  22 -28   1  23 \n",
            "      -31   3  -9  22  15 \n",
            "      -18  26  24  22   4 \n",
            "       14  17  31  10  -7 \n",
            "\n",
            "--------Mostrando Matriz C suma secuencial MatA + MatB--------\n",
            "\n",
            "      -15  -3 -55 -22  -8 \n",
            "        6   5 -40 -17  42 \n",
            "        1 -29 -27  49  39 \n",
            "       11  17  54  25  28 \n",
            "        8 -14  22 -21  15 \n"
          ]
        }
      ]
    }
  ]
}